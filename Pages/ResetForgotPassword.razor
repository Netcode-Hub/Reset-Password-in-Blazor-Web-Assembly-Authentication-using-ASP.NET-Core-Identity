@page "/ResetForgotPassword"

@using JWTDemo.Client.Service;
@using JWTDemo.Shared.DTOs;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.JSInterop;
@inject IAuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3>Reset Password</h3>
@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors!)
        {
            <p>@error</p>
        }
        @Email
        @Token
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="resetPasswordDTO" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <InputText  class="form-control d-none" @bind-Value="@Email" />
                <InputText  class="form-control d-none" @bind-Value="@Token" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="resetPasswordDTO.NewPassword" />
                <ValidationMessage For="@(() => resetPasswordDTO.NewPassword)" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Confirm Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="resetPasswordDTO.ConfirmNewPassword" />
                <ValidationMessage For="@(() => resetPasswordDTO.ConfirmNewPassword)" />
            </div>
            <div class="form-group mt-2">
                <label>@Message</label>
            </div>
            <div class="form-group mt-2">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
            
        </EditForm>
    </div>
</div>

@code {
    public string? Email;
    public string? Token;



    private string Message = string.Empty;
    ResetPasswordDTO resetPasswordDTO = new ResetPasswordDTO();
    private bool ShowErrors;
    private string? Errors;

    private async Task HandleResetPassword()
    {

        ShowErrors = false;
        Message = "Please Wait...";

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("email", out var email))
        {
            Email = email;
        }
        if (queryStrings.TryGetValue("token", out var token))
        {
            Token = token;
        }

        resetPasswordDTO.Email = email;
        resetPasswordDTO.Token = token;

        Console.WriteLine(resetPasswordDTO.Email);
        Console.WriteLine(resetPasswordDTO.Token);
        Console.WriteLine(resetPasswordDTO.NewPassword);
        Console.WriteLine(resetPasswordDTO.ConfirmNewPassword);
        var result = await AuthService.ResetForgotPassword(resetPasswordDTO);

        if (result.Successful)
        {
            await JS.InvokeVoidAsync("alert", "Password Reset Done!");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = "Something wrong happened";
            ShowErrors = true;
        }
    }
}
